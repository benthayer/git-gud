Now that we've learned how to detach the HEAD, let's learn easier ways to refer to a commit.
>>>
In the previous exercise, we learned that we only need 4-digits of a commit hash in order to reference a particular commit. This method made the process much easier than entering in a giant string of characters and numbers (e.g. fed2da64c0efc5293610bdd892f82a58e8cbc5d8). However, in this exercise we'll learn even more efficient ways of refering to commits!
>>>
In particular there are two ways of referencing commits called "relative refs." Relative refs are used to refer to a commit node relative to the location of another node.
>>>
The ^ operator refers to the parent node of the commit you specify. I.e., "git checkout bugFix^" will checkout the parent node of bugFix! See? No ugly string of characters or numbers! The second operator is the "~<number>" operator. It's used to point to a commit that is several nodes above the node you specify. That operator will be covered in the next exercise. For now, let's take a look at the caret operator.
>>>
The caret operator can be stacked. That is, you can use ^^ to refer to the grandparent node, or ^^^ to refer to the grand-grandparent node. Obviously, the practicality of stacking ^ operators drops off quickly; however, to refer to a parent node, or grandparent node, the ^ node works just fine.
>>>
Likewise, the ^ node can be used on the HEAD. Using "git checkout HEAD^" allows us to move back one commit relative to the current commit we are on. Repeatedly using this command is a convenient way to move back in time!
>>>
Woohoo! You've learned how to use the caret operator to refer to commit nodes. Now, try using the caret operator to refer to the parent node of bugFix!
